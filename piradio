#!/usr/bin/python
import RPi.GPIO as GPIO  
import os
from time import sleep

# Define GPIO to LCD mapping
LCD_RS = 23
LCD_E  = 17
LCD_D4 = 24
LCD_D5 = 22
LCD_D6 = 25
LCD_D7 = 10

# Define GPIO to Button mappings
STOP = 7
BUTTON_1 = 8
BUTTON_2 = 11
BUTTON_3 = 9

# Define some device constants
LCD_WIDTH = 16    # Maximum characters per line
LCD_CHR = True
LCD_CMD = False

LCD_LINE_1 = 0x80 # LCD RAM address for the 1st line
LCD_LINE_2 = 0xC0 # LCD RAM address for the 2nd line

# Timing constants
E_PULSE = 0.0005
E_DELAY = 0.0005

GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)       # Use BCM GPIO numbers

#LCD GPIO SETUP
GPIO.setup(LCD_E, GPIO.OUT)  # E
GPIO.setup(LCD_RS, GPIO.OUT) # RS
GPIO.setup(LCD_D4, GPIO.OUT) # DB4
GPIO.setup(LCD_D5, GPIO.OUT) # DB5
GPIO.setup(LCD_D6, GPIO.OUT) # DB6
GPIO.setup(LCD_D7, GPIO.OUT) # DB7
  
# BUTTONS GPIO SETUP
GPIO.setup(STOP, GPIO.IN, pull_up_down=GPIO.PUD_DOWN) 
GPIO.setup(BUTTON_1, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(BUTTON_2, GPIO.IN, pull_up_down=GPIO.PUD_DOWN) 
GPIO.setup(BUTTON_3, GPIO.IN, pull_up_down=GPIO.PUD_DOWN) 

def main():
  try:  
    while True:            # this will carry on until you hit CTRL+C  
        if GPIO.input(STOP): 
            print "STOP BUTTON is PRESSED"  
            os.system("mpc stop")
            sleep(5) 
        if GPIO.input(BUTTON_1):
            print "BUTTON 1 IS PRESSED"  
            os.system("mpc clear; mpc load vick; mpc random on;mpc play")
            sleep(5)       
        if GPIO.input(BUTTON_2):
            print "BUTTON 2 IS PRESSED"  
            os.system("mpc clear; mpc load main; mpc play 3")
            sleep(5)      
        if GPIO.input(BUTTON_3): 
            print "BUTTON 3 IS PRESSED"  
            os.system("mpc clear; mpc load main; mpc play 4")
            sleep(5)       
        sleep(0.1)         
  finally:                   
    GPIO.cleanup()        

  
def lcd_init():
  # Initialise display
  lcd_byte(0x33,LCD_CMD) # 110011 Initialise
  lcd_byte(0x32,LCD_CMD) # 110010 Initialise
  lcd_byte(0x06,LCD_CMD) # 000110 Cursor move direction
  lcd_byte(0x0C,LCD_CMD) # 001100 Display On,Cursor Off, Blink Off
  lcd_byte(0x28,LCD_CMD) # 101000 Data length, number of lines, font size
  lcd_byte(0x01,LCD_CMD) # 000001 Clear display
  time.sleep(E_DELAY)

try:
  main()
except KeyboardInterrupt:
  pass
finally:                   
    GPIO.cleanup()        

